#!/usr/bin/env python3
"""
Print utility functions for automated printer operations
Handles toolpath saving, data directory creation, and live print capture
"""

import os
import time
from datetime import datetime
from camera_integration import capture_image, start_timelapse
from g_code_comands import absolute, movePrintHead

def data_directory():
    """
    Create a timestamped directory within the data folder.
    Returns the folder name in format MonthMM_DD_HH_MM_SS
    """
    
    # Create data folder if it doesn't exist
    data_folder = "data"
    if not os.path.exists(data_folder):
        os.makedirs(data_folder)
    
    # Generate timestamp in the required format
    timestamp = datetime.now().strftime("%m_%d_%H_%M_%S")
    
    # Create the full path for the new directory
    new_dir_path = os.path.join(data_folder, timestamp)
    
    # Create the directory
    os.makedirs(new_dir_path, exist_ok=True)
    
    print(f"Created timestamped directory: {new_dir_path}")
    return timestamp

def save_toolpath(toolpath, data_folder):
    """
    Save the toolpath as a G-code file
    """
    # Generate timestamp for filename
    timestamp = datetime.now().strftime("%m_%d_%H_%M_%S")
    filename = f"toolpath_{timestamp}.gcode"
    filepath = os.path.join(data_folder, filename)
    
    try:
        with open(filepath, 'w') as f:
            # Write G-code header
            f.write("; Toolpath generated by MXene printer\n")
            f.write(f"; Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("; Format: G1 X<x> Y<y> Z<z> E<extrusion>\n\n")
            
            # Write each toolpath point as G-code
            for i, point in enumerate(toolpath):
                x, y, z, e = point
                f.write(f"G1 X{x:.3f} Y{y:.3f} Z{z:.3f} E{e:.3f}\n")
            
            f.write("\n; End of toolpath\n")
        
        print(f"✓ Toolpath saved as G-code: {filepath}")
        return filepath
        
    except Exception as e:
        print(f"✗ Error saving toolpath: {e}")
        return None

def capture_live_print(comand, klipper_ctrl, prnt, file_path):
    """
    Capture images during live printing operations
    
    Args:
        comand: CAPTURE command string with parameters
        klipper_ctrl: Klipper controller instance
        prnt: Printer profile
        file_path: Directory to save images
    """
    try:
        parts = [part.strip() for part in comand.split(",")]
        
        camera = int(parts[1])
        x = float(parts[2])
        y = float(parts[3])
        z = float(parts[4])
        file_name = parts[5]

    except (ValueError, IndexError) as e:
        print(f"✗ Error parsing CAPTURE command '{comand}': {e}")
        return None

    if file_name is None:
        file_name = f"capture_cam{camera}_x{x}_y{y}_z{z}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    else:
        file_name = f"{file_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"

    time_lapse = parts[6]
    
    os.makedirs(file_path, exist_ok=True)

    # Move to Capture Location
    klipper_ctrl.send_gcode(absolute()[0])
    klipper_ctrl.send_gcode(movePrintHead(0, 0, z, prnt)[0])
    klipper_ctrl.send_gcode(movePrintHead(x, y, 0, prnt)[0])
    
    # Wait for Printer to be in Position
    klipper_ctrl.wait_for_idle()
    
    print(f"Printer is ready to capture")

    if camera == 1:
        camera_id = "video0"
    elif camera == 2:
        camera_id = "video2"

    if not time_lapse:
        success, result = capture_image(camera_id, file_path, file_name)

        if success:
            print(f"✓ Image captured successfully: {result}")
            return result
        else:
            print(f"✗ Image capture failed: {result}")
            return None

    else:
        timelapse_prefix = file_name.replace('.jpg', '').replace('.jpeg', '')
        time_lapse_interval = int(parts[7])
        time_lapse_duration = int(parts[8])
        success = start_timelapse(
            device_id=camera_id,
            interval_seconds=time_lapse_interval,
            duration_seconds=time_lapse_duration,
            save_path=file_path,
            filename_prefix=timelapse_prefix
        )

        if success:
            print(f"✓ Timelapse started successfully")
            print(f"   Duration: {time_lapse_duration}s")
            print(f"   Interval: {time_lapse_interval}s")
            print(f"   Expected frames: {time_lapse_duration // time_lapse_interval}")
            return f"timelapse_started_{camera_id}_{timelapse_prefix}"
        else:
            print(f"✗ Failed to start timelapse")
            return None 